#include "common.h"

using namespace AI;

TEST(YAAnnNeuron, TDD)
{
  YAAnnNeuron neuron0;
  ASSERT_EQ(NULL, neuron0.getActFun());
  ASSERT_DOUBLE_EQ(.0, neuron0.getInput());
  ASSERT_DOUBLE_EQ(.0, neuron0.getOutput());
  ASSERT_DOUBLE_EQ(.0, neuron0.getDelta());
  ASSERT_DOUBLE_EQ(.0, neuron0.getIdealOutput());
  ASSERT_DOUBLE_EQ(.0, neuron0.getError());
  ASSERT_FALSE(neuron0.isBiased());
  ASSERT_EQ(0, neuron0.axonsNumber());
  ASSERT_EQ(NULL, neuron0.getAxon(0));
  ASSERT_EQ(NULL, neuron0.getAxon(-1));
  ASSERT_EQ(NULL, neuron0.getAxon(2));
  ASSERT_EQ(-1, neuron0.findFreeAxon());
  neuron0.setInput(1.);
  neuron0.setOutput(1.);
  neuron0.setDelta(1.);
  neuron0.setError(1.);
  neuron0.setIdealOutput(1.);
  ASSERT_DOUBLE_EQ(1., neuron0.getInput());
  ASSERT_DOUBLE_EQ(1., neuron0.getOutput());
  ASSERT_DOUBLE_EQ(1., neuron0.getDelta());
  ASSERT_DOUBLE_EQ(1., neuron0.getIdealOutput());
  ASSERT_DOUBLE_EQ(1., neuron0.getError());
  std::unique_ptr<YAAnnActFun> actFunStub1(new YAAnnActFunStub1);
  neuron0.setActFun(actFunStub1.get());
  ASSERT_EQ(actFunStub1.get(), neuron0.getActFun());
  neuron0.setIsBiased(true);
  ASSERT_TRUE(neuron0.isBiased());
  neuron0.setIsBiased(false);
  ASSERT_FALSE(neuron0.isBiased());
  YAAnnNeuron neuron1;
  neuron0.connectTo(&neuron1);
  ASSERT_EQ(0, neuron0.getInputsNumber());
  ASSERT_EQ(1, neuron1.getInputsNumber());
  ASSERT_EQ(1, neuron0.axonsNumber());
  ASSERT_EQ(0, neuron0.findAxonByDestNeuron(&neuron1));
  ASSERT_EQ(&neuron1, neuron0.getAxon(0)->getDestNeuron());
  ASSERT_DOUBLE_EQ(.0, neuron0.getAxon(0)->getWeight());
  ASSERT_DOUBLE_EQ(.0, neuron0.getAxon(0)->getGrad());
  YAAnnNeuron neuron2;
  neuron0.connectTo(&neuron2);
  ASSERT_EQ(0, neuron0.getInputsNumber());
  ASSERT_EQ(1, neuron2.getInputsNumber());
  ASSERT_EQ(2, neuron0.axonsNumber());
  ASSERT_EQ(1, neuron0.findAxonByDestNeuron(&neuron2));
  ASSERT_EQ(&neuron2, neuron0.getAxon(1)->getDestNeuron());
  ASSERT_DOUBLE_EQ(.0, neuron0.getAxon(1)->getWeight());
  ASSERT_DOUBLE_EQ(.0, neuron0.getAxon(1)->getGrad());
  neuron0.disconnectFrom(&neuron1);
  ASSERT_EQ(0, neuron0.getInputsNumber());
  ASSERT_EQ(0, neuron1.getInputsNumber());  
  ASSERT_EQ(2, neuron0.axonsNumber());
  ASSERT_EQ(NULL, neuron0.getAxon(0)->getDestNeuron());
  ASSERT_EQ(&neuron2, neuron0.getAxon(1)->getDestNeuron());
  neuron0.disconnectFrom(&neuron2);
  ASSERT_EQ(0, neuron0.getInputsNumber());
  ASSERT_EQ(0, neuron2.getInputsNumber());
  ASSERT_EQ(2, neuron0.axonsNumber());
  ASSERT_EQ(NULL, neuron0.getAxon(0)->getDestNeuron());
  ASSERT_EQ(NULL, neuron0.getAxon(1)->getDestNeuron());
  neuron0.connectTo(&neuron1);
  ASSERT_EQ(0, neuron0.getInputsNumber());
  ASSERT_EQ(1, neuron1.getInputsNumber());
  ASSERT_EQ(&neuron1, neuron0.getAxon(0)->getDestNeuron());
  ASSERT_EQ(NULL, neuron0.getAxon(1)->getDestNeuron());
  neuron0.connectTo(&neuron2);
  ASSERT_EQ(0, neuron0.getInputsNumber());
  ASSERT_EQ(1, neuron2.getInputsNumber());  
  ASSERT_EQ(&neuron1, neuron0.getAxon(0)->getDestNeuron());
  ASSERT_EQ(&neuron2, neuron0.getAxon(1)->getDestNeuron());
  neuron1.connectTo(&neuron0);
  neuron2.connectTo(&neuron0);
  ASSERT_EQ(2, neuron0.getInputsNumber());
  neuron1.disconnectFrom(&neuron0);
  neuron2.disconnectFrom(&neuron0);
  ASSERT_EQ(0, neuron0.getInputsNumber());
}
